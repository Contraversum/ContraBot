import { ActionRowBuilder, ButtonBuilder, ButtonStyle, EmbedBuilder, SlashCommandBuilder, Guild, Role } from 'discord.js';
import { client, db } from '../../index';
import cron from 'cron';

const questions = [
    'Auf allen Autobahnen soll ein generelles Tempolimit gelten.',
    'Deutschland soll seine Verteidigungsausgaben erh√∂hen.',
    'Bei Bundestagswahlen sollen auch Jugendliche ab 16 Jahren w√§hlen d√ºrfen.',
    'Die F√∂rderung von Windenenergie soll beendet werden?',
    'Die M√∂glichkeiten der Vermieterinnen und Vermieter, Wohnungsmieten zu erh√∂hen, sollen gesetzlich st√§rker begrenzt werden.',
    'Impfstoffe gegen Covid - 19 sollen weiterhin durch Patente gesch√ºtzt sein.',
    'Der f√ºr das Jahr 2038 geplante Ausstieg aus der Kohleverstromung soll vorgezogen werden.',
    'Alle Erwerbst√§tigen sollen in der gesetzlichen Rentenversicherung versichert sein m√ºssen.',
    'Das Recht anerkannter Fl√ºchtlinge auf Familiennachzug soll abgeschafft werden.',
    'Auf den Umsatz, der in Deutschland mit digitalen Dienstleistungen erzielt wird, soll eine nationale Steuer erhoben werden.',
    'Die traditionelle Familie aus Vater, Mutter und Kindern soll st√§rker als andere Lebensgemeinschaften gef√∂rdert werden.',
    'Spenden von Unternehmen an Parteien sollen weiterhin erlaubt sein.',
    'Studentinnen und Studenten sollen BAf√∂G unabh√§ngig vom Einkommen ihrer Eltern erhalten.',
    'In Deutschland soll es generell m√∂glich sein, neben der deutschen eine zweite Staatsb√ºrgerschaft zu haben.',
    'Bundesbeh√∂rden sollen in ihren Ver√∂ffentlichungen unterschiedliche Geschlechtsidentit√§ten sprachlich ber√ºcksichtigen m√ºssen.',
    'Die Ostsee - Pipeline ‚ÄûNord Stream2‚Äú, die Gas von Russland nach Deutschland transportiert, soll wie geplant in Betrieb gehen d√ºrfen.',
    'Der Solidarit√§tszuschlag soll vollst√§ndig abgeschafft werden.',
    'Das Tragen eines Kopftuchs soll Beamtinnen im Dienst generell erlaubt sein.',
    'Die Zulassung von neuen Autos mit Verbrennungsmotor soll auch langfristig m√∂glich sein.',
    'Der Bund soll mehr Zust√§ndigkeiten in der Schulpolitik erhalten.',
    'Der Bund soll Projekte zur Bek√§mpfung des Antisemitismus st√§rker finanziell unterst√ºtzen.',
    'Chinesische Firmen sollen keine Auftr√§ge f√ºr den Ausbau der Kommunikationsinfrastruktur in Deutschland erhalten d√ºrfen.',
    'Der Staat soll weiterhin f√ºr Religionsgemeinschaften die Kirchensteuer einziehen.',
    'Der kontrollierte Verkauf von Cannabis soll generell erlaubt sein.',
    'Deutschland soll aus der Europ√§ischen Union austreten.',
    'Die Landeslisten der Parteien f√ºr die Wahlen zum Deutschen Bundestag sollen abwechselnd mit Frauen und M√§nnern besetzt werden m√ºssen.',
    'Station√§re Behandlungen im Krankenhaus sollen weiterhin √ºber eine Fallpauschale abgerechnet werden.',
    'Auf hohe Verm√∂gen soll wieder eine Steuer erhoben werden.',
    'Bei der Video√ºberwachung √∂ffentlicher Pl√§tze soll Gesichtserkennungssoftware eingesetzt werden d√ºrfen.',
    'Auch Ehepaare ohne Kinder sollen weiterhin steuerlich beg√ºnstigt werden.',
    '√ñkologische Landwirtschaft soll st√§rker gef√∂rdert werden als konventionelle Landwirtschaft.',
    'Islamische Verb√§nde sollen als Religionsgemeinschaften staatlich anerkannt werden k√∂nnen.',
    'Der staatlich festgelegte Preis f√ºr den Aussto√ü von CO2 beim Heizen und Autofahren soll st√§rker steigen als geplant.',
    'Die Schuldenbremse im Grundgesetz soll beibehalten werden.',
    'Asyl soll weiterhin nur politisch Verfolgten gew√§hrt werden.',
    'Der gesetzliche Mindestlohn soll sp√§testens im Jahr 2022 auf mindestens 12 Euro erh√∂ht werden.',
    'Der Flugverkehr soll h√∂her besteuert werden.',
    'Unternehmen sollen selbst entscheiden, ob sie ihren Besch√§ftigten das Arbeiten im Homeoffice erlauben.',
];

const checkForFeedbackRequests = async () => {
    const now = new Date();
    const oneWeekAgo = new Date(now.getTime() - (7 * 24 * 60 * 60 * 1000));

    const users = await db.db('contrabot').collection("users").find({
        completionTime: { 
            $lt: oneWeekAgo.toISOString()
        },
        feedbackRequestSent: { $ne: true } // This ensures that you don't ask for feedback multiple times
    }).toArray();

    // Create a button to start the survey
    const startSurveyButton = new ButtonBuilder()
        .setCustomId('start_survey')
        .setLabel('Jetzt Feedback geben')
        .setStyle(ButtonStyle.Primary);

    const actionRow = new ActionRowBuilder<ButtonBuilder>()
        .addComponents(startSurveyButton);

    for (const user of users) {
        const discordUser = await client.users.fetch(user.userId);
        if (discordUser) {
            await discordUser.send({
                content: `
                Hallo üëã, vor einer Woche hast du den Test ausgef√ºllt. 
                Wir k√∂nnen Contraversum nur verbessern durch Feedback von unseren Nutzern. 
                Daher w√§re es ein wichtiger Beitrag f√ºr das Projekt und damit auch f√ºr die depolarisierung 
                der Gesellschaft wenn du uns Feedback geben k√∂nntest, es dauert weniger als 3 Minuten. Vielen Dank, dein ContraBot ‚ù§Ô∏è`,
                components: [actionRow]
            });

            // Update context for this user in the database
            await db.db('contrabot').collection("users").updateOne(
                { userId: user.userId }, 
                { 
                    $set: { 
                        feedbackRequestSent: true
                    }
                }
            );
        }
    }
};

const job = new cron.CronJob('0 0 * * * *', checkForFeedbackRequests); // checks for Feedback every hour
job.start();


export const sendQuestion = async (interaction: any) => {

    const userContext = await db.db('contrabot').collection("users").findOne({ userId: interaction.user.id });
    
    let currentQuestionIndex = userContext?.currentQuestionIndex || 0;
    let userResponses = userContext?.userVector || [];
    var currentQuestionDisplay = currentQuestionIndex + 1

    if (currentQuestionIndex === 0) {
        userResponses = [];
    }

    if (currentQuestionIndex < questions.length) {
        const embed = new EmbedBuilder()
            .setTitle("Frage: " + currentQuestionDisplay + "/38")
            .setDescription(questions[ currentQuestionIndex ])
            .setColor('#fb2364');

        const builder = new ActionRowBuilder<ButtonBuilder>().addComponents([
            new ButtonBuilder()
                .setCustomId(`agree`)
                .setStyle(ButtonStyle.Success)
                .setEmoji("üëç"),
            new ButtonBuilder()
                .setCustomId(`neutral`)
                .setStyle(ButtonStyle.Secondary)
                .setEmoji("üòê"),
            new ButtonBuilder()
                .setCustomId(`disagree`)
                .setStyle(ButtonStyle.Danger)
                .setEmoji("üëé"),
        ]);

        interaction.user.send({
            embeds: [ embed ],
            components: [ builder ]
        });

          // Update context for this user in the database
          await db.db('contrabot').collection("users").updateOne(
            { userId: interaction.user.id }, 
            { 
                $set: { 
                    userId: interaction.user.id,
                    username: interaction.user.username,
                    currentQuestionIndex: currentQuestionIndex + 1,
                    userVector: userResponses,
                    feedbackRequestSent: false,
                    currentFeedbackQuestionIndex: 0
                }
            }, 
            { upsert: true }
        );
    } else {
        interaction.user.send("Danke, dass du den Test ausgef√ºllt hast! Dein Gespr√§chspartner wird dir zugesendet werden.");
        console.log(userResponses);
        console.log(interaction.user.id);

        const bestMatch = await findMatchingUser(interaction.user.id, userResponses);

        if (bestMatch) {
            interaction.user.send(`Dein bester Gespr√§chspartner ist: **${bestMatch}**.`);
        }
        else {
            console.warn('No best match found');
        }        
        

        verifyUser(interaction);

        // Reset context for this user in the database
        await db.db('contrabot').collection("users").updateOne(
            { userId: interaction.user.id },
            {
                $set: {
                    currentQuestionIndex: 0,  // Reset to first question
                    completionTime: new Date().toISOString(), // Set completion time
                }
            }
        );
    }
}

async function findMatchingUser(userId: string, userResponses: number[]): Promise<string | null> {
    if (!userId || !Array.isArray(userResponses) || userResponses.length === 0) {
        console.log("Invalid input parameters");
        return null;
    }

    try {
        const users = await db.db('contrabot').collection("users").find({}).toArray();

        if (!Array.isArray(users)) {
            console.error("Error retrieving users from database");
            return null;
        }

        let mostOppositeUser: { userId: string, username: string } | null = null;
        let lowestDifferenceScore = Infinity;  // Initialize to a high value

        for (const user of users) {
            if (user.userId === userId) {
                console.log("Skipped: same userId as input userId");
                continue;
            }

            if (!Array.isArray(user.userVector) || user.userVector.length === 0) {
                console.log(`Skipped: Missing or invalid userVector for userId ${user.userId}`);
                continue;
            }

            // Calculate the difference score
            const differenceScore = userResponses.reduce((acc, value, index) => {
                // Multiply corresponding elements and sum them up
                return acc + value * user.userVector[index];
            }, 0);

            // Update the most opposite user if the difference score is lower than the lowest seen so far
            if (differenceScore < lowestDifferenceScore) {
                lowestDifferenceScore = differenceScore;
                mostOppositeUser = { userId: user.userId, username: user.username };
            }
        }

        return mostOppositeUser?.username || null;
    } catch (error) {
        console.error("Error in findMatchingUser: ", error);
        return null;
    }
}

function verifyUser(interaction: any) {
    const guild: Guild | undefined = client.guilds.cache.get('1131613084553859182');
    if (!guild) {
        console.error('Guild not found');
        return;
    }
    const role: Role | undefined = guild.roles.cache.get('1143590879274213486');
    if (!role) {
        console.error('Role not found');
        return;
    }
    const member = guild.members.cache.get(interaction.user.id);
    if (!member) {
        console.error('Member not found');
        return;
    }
    member.roles.add(role).catch(console.error);
}

export const data = new SlashCommandBuilder().setName('test').setDescription('Asks the test questions!');
export const execute = async (interaction: any) => {
    await interaction.reply({
        content: 'Deine Meinung ist gefragt! Bitte kommentiere die folgenden These mit üëç, üëé oder üòê. Test wurde gestartet.\nBitte schaue in deinen Direktnachrichten nach :)',
        ephemeral: true,
    });
    sendQuestion(interaction);
};

